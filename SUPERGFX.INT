type
    ekran = array[0..63999] of byte;
    tsprite = array[1..100, 1..100] of byte;
    strtype = (normal, hide);
    Tpalette = array[0..255, 1..3] of byte;
    Tfont = array[1..255, 1..16, 1..8] of byte;
    Tfont2 = array[1..255, 0..15] of byte;
    iloscbitow = 0..7;
    spritexy = 1..100;

var
   bufor : ^ekran;

{*********************************** GRAPH **********************************}
procedure initgfx13h;
procedure closegfx13h;
procedure pokazgrafike;
procedure pokazgrafike2;
procedure cls(col : byte);
procedure windows(x, y, x2, y2 : word);
procedure putpixel(x, y, c : integer);
function getpixel(x, y : integer) : byte;
procedure outtextxy(x, y : integer; scx, scy : byte; c : byte; str : string; m : boolean);
procedure outtextxygrind(x, y : integer; scx, scy : byte; c : byte; str : string; m : boolean);
procedure line(x1, y1, x2, y2 : integer; c : byte);
procedure hline(x1, x2, y : integer; c : byte);
procedure vline(x, y1, y2 : integer; c : byte);
procedure bar(x, y, d, s : integer; color : byte);
procedure box(x, y, r : integer; c1, c2 : byte; full : boolean);
procedure rectangle(x, y, d, s : integer; kolor : byte);
procedure ellipse(exc, eyc, ea, eb, color : integer);
procedure circle(exc, eyc, e, color : integer);
procedure polygon(x1, y1, x2, y2, x3, y3, x4, y4 : integer; color : byte);
procedure setcolor(col : byte; r, g, b : byte);
procedure getcolor(col : byte; var r, g, b : byte);
procedure setpal(pal : Tpalette);
procedure getpal(var pal : Tpalette);
procedure loadpal(filename: string);
procedure savepal(filename: string);
procedure strtext(xx, yy, ods, tlo, kolor, ile : integer; var tekst : string; w : strtype);
procedure fadeup(pal : Tpalette; ile : word);
procedure fadedown(ile : word);
procedure flood(x, y : integer; col : byte);
procedure savetopaintfile(x, y, d, s : integer; name : string);
procedure openpaintfile(x, y : integer; name : string);
function paintdefx(name : string) : byte;
function paintdefy(name : string) : byte;
procedure opengfxfile(plik : string; tlo : byte);
procedure savegfxfile(plik : string);
procedure saveraw(filename : string);
procedure loadraw(filename : string; c1, c2 : byte);
procedure pobierz_ekran_do(x, y, d, s : integer; var tab : ekran);
procedure draw_random(x, y, d, s : integer; var tab : ekran; col : byte; b : boolean);
procedure rysuj_ekran(x, y, d, s : integer; var tab : ekran; col : byte; b : boolean);
procedure czysc_bufor(var buf : ekran; nr : byte);
procedure rotate_sprite(k : real; var tab : tsprite; x, y, maxx, maxy : integer; hidecol : byte);
procedure scale_sprite(x, y, sizeimagex, sizeimagey, sizex, sizey : integer; var sprite : Tsprite);
procedure save_sprite(x, y, d, s : spritexy; var tab : tsprite);
{*********************************** SUPER **********************************}
procedure blur(xx, yy, dd, ss : integer);
procedure fader(xx, yy, dd, ss : integer);
procedure grind(xx, yy, dd, ss : integer);
procedure fire(xx, yy, dd, ss : integer);
{************************************ INNE **********************************}
procedure czysc_ekran;
procedure waitretrace;
function readkey : char;
function keypressed : boolean;
function enterkey : boolean;
procedure delay(ile : word);
function divide_number(number : word; divide : word) : boolean;
function numstr(number : Longint) : string;
function numstrreal(number : real; ile : byte) : string;
function numstrboolean(opcja : boolean) : string;
function is_file(plik : string) : boolean;
procedure nosound;
procedure sound(hz : word);
procedure dzwiek(hz, mz : word);
function getbit(zmienna : byte; nr : iloscbitow) : boolean;
function setbit(zmienna : byte; nr : iloscbitow) : byte;
function clrbit(zmienna : byte; nr : iloscbitow) : byte;
function ile_procent_z(ile, z_ilu : real) : real;
{************************************ KEYS **********************************}
procedure capslock(on : boolean);
procedure numlock(on : boolean);
procedure scrolllock(on : boolean);
function capslockon : boolean;
function numlockon : boolean;
function scrollockon : boolean;
{************************************ FONT **********************************}
procedure new_font(name : string; var fnt : Tfont);
procedure new_font2(name : string; var font : Tfont2);
procedure outtextfntxy(x, y : integer; o, col, styl, typ : byte; text : string; var fnt : Tfont);
procedure outtextfntxy_center(x, y : integer; o, col, styl, typ : byte; text : string; var fnt : Tfont);
procedure outtextfntxy_rainbow(x, y : integer; o, colile, styl, typ : byte; text : string; var fnt : Tfont);
procedure outtextfntxy_rainbow_center(x, y : integer; o, colile, styl, typ : byte; text : string; var fnt : Tfont);
procedure outtextfntxy2(x, y : integer; o, col, styl, typ : byte; text : string; var fnt : Tfont2);
procedure outtextfntxy2_center(x, y : integer; o, col, styl, typ : byte; text : string; var fnt : Tfont2);
procedure outtextfntxy2_rainbow(x, y : integer; o, col, styl, typ : byte; text : string; var fnt : Tfont2);
procedure outtextfntxy2_rainbow_center(x, y : integer; o, col, styl, typ : byte; text : string; var fnt : Tfont2);
{*********************************** MOUSE **********************************}
function initmouse : boolean;
procedure setmousepos(x, y : integer);
function mousex : word;
function mousey : word;
procedure setmousewindow(x1, y1, x2, y2 : integer);
function mousein(x, y, x1, y1, x2, y2 : integer) : boolean;
procedure showmouse;
procedure hidemouse;
function leftbutton : boolean;
function rightbutton : boolean;
procedure copy_screen(x, y, mx, my : integer);
procedure put_screen(x, y, mx, my : integer);
procedure draw_normal_cur(mx, my : integer; c1, c2 : byte);